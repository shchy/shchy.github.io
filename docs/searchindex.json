{"categories":[],"posts":[{"content":"GW無駄に過ごしたみたいだけど大丈夫そ？ GWはインフラ周りを整備しただけでアプリは完成しなかった。\n「こんなもんちょっと本気出せばすぐ完成するのよ〜🤗」という気持ちがいけないのだ。\n実際は週末しか時間は作れない。\nその週末も、趣味のお料理とかマイクラ（子供と）があるし、それにおじさんはいつでも眠いのだ。\n時間がないのではなくやらないだけ そうなのである。おじさんはこの人類共通の課題、事実を知っている。\n時間がないというのは事実ではあるが核心ではない。\n「やらない事」 問題はこの一点のみなのである。\nやり始めるとやる気が出る これが我々人類に神が与えた習性であり唯一の希望なのだ。\nやる気は湧いてくるものではない、ただやる、それだけである。\n今日のおじさんのきもち 今日はちょっとやる気が出ないのでブログ更新で自分を誤魔化すおじさんである。\n","id":0,"section":"posts","summary":"GW無駄に過ごしたみたいだけど大丈夫そ？ GWはインフラ周りを整備しただけでアプリは完成しなかった。 「こんなもんちょっと本気出せばすぐ完成する","tags":["無駄口"],"title":"またサボってしまった","uri":"https://shchy.github.io/2021/05/20210508/","year":"2021"},{"content":"OAuth これをやりたかったのである。\nコールバック先として本番環境のホスト名が必要になる予感がしたので、昨日までDigitalOceanで仮想マシン作ったり、ついでにGithubActionsでCI化したり、FirebaseHostingに配置したりしてたのである。\nしかしながら実際やってみたらコールバック先はFirebaseに集約されるっぽいので先回りする必要はなかったのかもしれない。\nFirebaseとGithubの設定   FirebaseのコンソールからAuthentication-\u0026gt;Sign-in methodを選択して一覧からGithubを選択。\n  認証コールバックURLをコピーしておく\n  Githubの設定-\u0026gt;Developer Settings-\u0026gt;OAuth Appsを選択してRegister a new aplicationボタンを押下。\n  Generate a new lient secretボタンを押下\n  ClientIDとClientSecretをコピーしておく\n  Authorization callback URLに手順２でコピーしたURLを貼り付け\n※その他は適当に入力する\n※ダークモードになってるのはSS撮り忘れてた為   Firebaseコンソールに戻って手順5でコピーしたClientIDとClientSecretを貼り付け\n  アプリからログインするとユーザ一覧に追加されることが確認できる。\n  Flutterクライアント（Web）の修正   firebaseコンソールから追加したWebアプリを選択し、CDNタブに表示されるタグをコピー   ./web/index.htmlにfirebaseに必要なスクリプトを追加\n  \u0026lt;body\u0026gt; \u0026lt;!-- ★ここから --\u0026gt; \u0026lt;!-- The core Firebase JS SDK is always required and must be listed first --\u0026gt; \u0026lt;script src=\u0026quot;https://www.gstatic.com/firebasejs/8.4.3/firebase-app.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://www.gstatic.com/firebasejs/8.4.3/firebase-auth.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://www.gstatic.com/firebasejs/8.4.3/firebase-firestore.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- TODO: Add SDKs for Firebase products that you want to use https://firebase.google.com/docs/web/setup#available-libraries --\u0026gt; \u0026lt;script src=\u0026quot;https://www.gstatic.com/firebasejs/8.4.3/firebase-analytics.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // Your web app's Firebase configuration // For Firebase JS SDK v7.20.0 and later, measurementId is optional var firebaseConfig = { apiKey: \u0026quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026quot;, authDomain: \u0026quot;XXXXXXXXXXX.firebaseapp.com\u0026quot;, projectId: \u0026quot;XXXXXXXXXX\u0026quot;, storageBucket: \u0026quot;XXXXXXXXXXX\u0026quot;, messagingSenderId: \u0026quot;XXXXXXX\u0026quot;, appId: \u0026quot;1:XXXXXXXXXXXXX:web:XXXXXXXXXX\u0026quot;, measurementId: \u0026quot;G-XXXXXX\u0026quot; }; // Initialize Firebase firebase.initializeApp(firebaseConfig); firebase.analytics(); \u0026lt;/script\u0026gt; \u0026lt;!-- ★ここまで --\u0026gt; \u0026lt;!-- This script installs service_worker.js to provide PWA functionality to application. For more information, see: https://developers.google.com/web/fundamentals/primers/service-workers --\u0026gt; \u0026lt;script\u0026gt; if ('serviceWorker' in navigator) { window.addEventListener('flutter-first-frame', function () { navigator.serviceWorker.register('flutter_service_worker.js'); }); } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;main.dart.js\u0026quot; type=\u0026quot;application/javascript\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;  pubspec.ymlに以下を追加  firebase_auth: ^1.1.2  認証処理を実装\nflutterのGoogle認証のサンプルを参考に実装  import 'dart:async'; import 'package:clientapp/resources/authentication_repository/authentication_repository.dart'; import 'package:firebase_auth/firebase_auth.dart' as firebase_auth; class SignUpFailure implements Exception {} class LogInWithEmailAndPasswordFailure implements Exception {} class LogInWithGithubFailure implements Exception {} class LogOutFailure implements Exception {} class AuthenticationRepository { AuthenticationRepository({ CacheClient? cache, firebase_auth.FirebaseAuth? firebaseAuth, }) : _cache = cache ?? CacheClient(), _firebaseAuth = firebaseAuth ?? firebase_auth.FirebaseAuth.instance; final CacheClient _cache; final firebase_auth.FirebaseAuth _firebaseAuth; static const userCacheKey = '__user_cache_key__'; Stream\u0026lt;User\u0026gt; get user { return _firebaseAuth.authStateChanges().map((firebaseUser) { final user = firebaseUser == null ? User.anonymous : firebaseUser.toUser; _cache.write(key: userCacheKey, value: user); return user; }); } /// Returns the current cached user. /// Defaults to [User.anonymous] if there is no cached user. User get currentUser { return _cache.read\u0026lt;User\u0026gt;(key: userCacheKey) ?? User.anonymous; } Future\u0026lt;void\u0026gt; signUp({required String email, required String password}) async { try { await _firebaseAuth.createUserWithEmailAndPassword( email: email, password: password, ); } on Exception { throw SignUpFailure(); } } Future\u0026lt;void\u0026gt; logInWithEmailAndPassword({ required String email, required String password, }) async { try { await _firebaseAuth.signInWithEmailAndPassword( email: email, password: password, ); } on Exception { throw LogInWithEmailAndPasswordFailure(); } } Future\u0026lt;void\u0026gt; logInWithGithub() async { try { final provider = firebase_auth.GithubAuthProvider(); // provider.addScope('repo'); provider.setCustomParameters({ 'allow_signup': 'false', }); await _firebaseAuth.signInWithPopup(provider); } on Exception { throw LogInWithGithubFailure(); } } Future\u0026lt;void\u0026gt; logOut() async { try { await Future.wait([ _firebaseAuth.signOut(), // _githubSignIn.signOut(), ]); } on Exception { throw LogOutFailure(); } } } extension on firebase_auth.User { User get toUser { return User(id: uid, email: email, name: displayName, photo: photoURL); } }  おじさんの感想 Githubアカウント持ってる一般の方は少ない気がするのでGoogleとかも追加しておくべき。\nサーバ側はどう絡むのかと言うと、クライアントが取得したUIDを受け取ってFirebaseに問い合わせてユーザ情報を得るっぽい。\nFirebaseって必須の知見なのでは？（２回目）\nちなみにローカルDebug環境でも認証できたので先に本番サーバを用意する必要は全然なかったです。\n","id":1,"section":"posts","summary":"OAuth これをやりたかったのである。 コールバック先として本番環境のホスト名が必要になる予感がしたので、昨日までDigitalOceanで仮想マシン","tags":["52steps","flutter","firebase","firebase Authentication"],"title":"Github Auth","uri":"https://shchy.github.io/2021/05/20210504/","year":"2021"},{"content":"Firebase Hositing apiサーバでSPAもホストしちゃえばいいじゃんと思っていたけど負荷の監視とか今後のことを考えると別にしたほうがいいのかなあ、と思ってググってたら、firebase hostingを発見。\nOAuthで使おうと思ってプロジェクトだけ作っていたが、Hostingも出来るのですね。\nGithubActionに対応している firebase init hostingするときに「github actions作る？」みたいなこと聞かれたのですかさずyes!と回答したらworkflowファイルを自動生成してくれた。\n必要なsecretなんかもgithubに勝手に追加してくれる。最高かよ。\nただそのままだとビルド時にflutterコマンドがないってエラーが出るのでflutterのインストールタスクだけ手動で追加が必要。\n# This file was auto-generated by the Firebase CLI # https://github.com/firebase/firebase-tools name: Deploy to Firebase Hosting on merge \u0026quot;on\u0026quot;: push: branches: - master jobs: build_and_deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Install Flutter run: git clone https://github.com/flutter/flutter.git - name: Add path run: echo \u0026quot;$(pwd)/flutter/bin\u0026quot; \u0026gt;\u0026gt; $GITHUB_PATH - name: Download Flutter packages run: flutter pub get working-directory: ./clientapp - run: \u0026quot;flutter build web --dart-define=BASE_URL=${{secrets.APP_IP}}\u0026quot; working-directory: ./clientapp - uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: \u0026quot;${{ secrets.GITHUB_TOKEN }}\u0026quot; firebaseServiceAccount: \u0026quot;${{ secrets.FIREBASE_SERVICE_ACCOUNT_STEPS_C8BDA }}\u0026quot; channelId: live projectId: XXXXXX env: FIREBASE_CLI_PREVIEWS: hostingchannels  おじさんの感想 あとはgithubにpushすると勝手にfirebaseのプロジェクトにデプロイされる。\nFirebaseってもしかして必須の知見なのでは？\nAPIサーバにCORSの設定すればAPIもコールできることを確認。\n完璧である。\nインフラばかりで中身の実装が一ミリも進んでない。\n","id":2,"section":"posts","summary":"Firebase Hositing apiサーバでSPAもホストしちゃえばいいじゃんと思っていたけど負荷の監視とか今後のことを考えると別にしたほうがいいのかなあ、と思ってグ","tags":["52steps","firebase","firebase hosting","Github Actions","web","flutter"],"title":"Firebase Hosting","uri":"https://shchy.github.io/2021/05/20210503_2/","year":"2021"},{"content":"CIをGitHub Actionsでやってみた gitlabCIでやってたことをGitHub Actionsのドキュメント見て置き換えるだけ。\nとはいえ最初workflowとactionがごっちゃになっててうまく検索できなかった。\ngitlabCIのgitlab-ci.ymlに当たるのはworkflowです。\nactionは汎用するために処理単位で切り出した共通モジュールなので超便利っぽいけど一旦スルーすると理解しやすいと思う。\n作ったもの # ./.github/workflows/00.yml name: \u0026quot;deploy\u0026quot; # トリガをmasterへのpushに設定 on: push: branches: - \u0026quot;master\u0026quot; jobs: # 別に名前は何でもよさそう build: # ジョブの実行環境を指定 runs-on: ubuntu-latest # 環境変数定義 env: GITHUB_SHA_S: $(echo ${GITHUB_SHA} | cut -c1-8) # ジョブのタスクを定義していく steps: # リポジトリチェックアウトするアクションを最初に実行 - uses: actions/checkout@v2 # DockerHubにログイン - name: Login to Docker Hub uses: docker/login-action@v1 with: username: ${{ secrets.DOCKERHUB_USERNAME }} password: ${{ secrets.DOCKERHUB_TOKEN }} # Build\u0026amp;Push - run: docker build --build-arg baseurl=${{secrets.APP_IP}} -t ${{ secrets.DOCKERHUB_USERNAME }}/52steps:${{env.GITHUB_SHA_S}} . - run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/52steps:${{env.GITHUB_SHA_S}} deploy: runs-on: ubuntu-latest env: GITHUB_SHA_S: $(echo ${GITHUB_SHA} | cut -c1-8) steps: - uses: actions/checkout@v2 # namespaceの作成 - name: create ns uses: steebchen/kubectl@master env: KUBE_CONFIG_DATA: ${{ secrets.K8S_CONFIG }} with: args: apply -f ./deploy/ns.yml # k8sにdockerhubへのアクセス権限を作成 - name: create secret uses: steebchen/kubectl@master env: KUBE_CONFIG_DATA: ${{ secrets.K8S_CONFIG }} with: args: | -n 52steps create secret docker-registry regcred \\ --docker-server=https://index.docker.io/v2/ \\ --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \\ --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \\ --docker-email=${{ secrets.DOCKERHUB_MAIL }} \\ -o yaml --dry-run | kubectl apply -f - # dockerHubのプライベートイメージにアクセスできるようにアクセス権限をnamespaceのdefaultアカウントに付与 - name: add regcred namespace account uses: steebchen/kubectl@master env: KUBE_CONFIG_DATA: ${{ secrets.K8S_CONFIG }} with: args: | patch serviceaccount default \\ -p '{\\\u0026quot;imagePullSecrets\\\u0026quot;: [{\\\u0026quot;name\\\u0026quot;: \\\u0026quot;regcred\\\u0026quot;}]}' \\ -n 52steps # DBイメージをデプロイ - name: create db uses: steebchen/kubectl@master env: KUBE_CONFIG_DATA: ${{ secrets.K8S_CONFIG }} with: args: apply -f ./deploy/db.yml # アプリをデプロイ - name: Update deployment file run: TAG=${{ secrets.DOCKERHUB_USERNAME }}/52steps:${{env.GITHUB_SHA_S}} \u0026amp;\u0026amp; sed -i \u0026quot;s|\u0026lt;IMAGE\u0026gt;|$TAG|\u0026quot; ./deploy/app.yml - name: create app uses: steebchen/kubectl@master env: KUBE_CONFIG_DATA: ${{ secrets.K8S_CONFIG }} with: args: apply -f ./deploy/app.yml # アプリのサービスをIngressで公開 - name: create ingress uses: steebchen/kubectl@master env: KUBE_CONFIG_DATA: ${{ secrets.K8S_CONFIG }} with: args: apply -f ./deploy/ingress.yml  DockerHubへのログイン 自分のprivateレジストリにアクセスしたいのでdocker/login-actionアクションを利用してdockerLoginを行う。\nDOCKERHUB_USERNAMEとDOCKERHUB_TOKENはgithub actionsの設定画面から設定しておく。\n# DockerHubにログイン - name: Login to Docker Hub uses: docker/login-action@v1 with: username: ${{ secrets.DOCKERHUB_USERNAME }} password: ${{ secrets.DOCKERHUB_TOKEN }}  Dockerfileのビルドとプッシュ githubのリポジトリに登録したDockerfileをbuildしてpushする。\n${{env.GITHUB_SHA_S}}はジョブの先頭で定義したGITHUB_SHA_S: $(echo ${GITHUB_SHA} | cut -c1-8)を参照しているだけ。\nGITHUB_SHAはトリガとなったgitのcommitのハッシュ値でDockerImageのタグに使いたいけど長すぎるので短く切り取った。\n# Build\u0026amp;Push - run: docker build --build-arg baseurl=${{secrets.APP_IP}} -t ${{ secrets.DOCKERHUB_USERNAME }}/52steps:${{env.GITHUB_SHA_S}} . - run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/52steps:${{env.GITHUB_SHA_S}}  k8sの操作 deployジョブではk8sの操作を行ってDockerImageのデプロイを行う。\nsteebchen/kubectlアクションを使ってkubectlを実行していく。\nKUBE_CONFIG_DATAにはローカルの.kube/configをbase64化した文字列を設定する。\n# namespaceの作成 - name: create ns uses: steebchen/kubectl@master env: KUBE_CONFIG_DATA: ${{ secrets.K8S_CONFIG }} with: args: apply -f ./deploy/ns.yml  k8sにDockerHubへのアクセス権を付与する DockerHubのprivateレジストリを利用しているのでk8sにもアクセス権を与える必要がある。\nk8sにはsecretの種別にdocker-registryへの権限が存在するのでそれを生成する。\nsecret作るときにapplyが使えないのでCIの2回目実行時に「既にあるけど」的なエラーが発生する。\nそのためdry-runでymlファイルを生成してパイプでapplyに渡すといい感じになる。\n# k8sにdockerhubへのアクセス権限を作成 - name: create secret uses: steebchen/kubectl@master env: KUBE_CONFIG_DATA: ${{ secrets.K8S_CONFIG }} with: args: | -n 52steps create secret docker-registry regcred \\ --docker-server=https://index.docker.io/v2/ \\ --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \\ --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \\ --docker-email=${{ secrets.DOCKERHUB_MAIL }} \\ -o yaml --dry-run | kubectl apply -f -  namespaceのdefaultアカウントに権限を付与 上記で作成したregcredをdeploymentファイルのimagePullSecretsに指定してもいいんだけどめんどくさいのでnamespaceのデフォルトアカウントにつけておく。\nこうするとそのnamespace内で常に有効になる。\n# dockerHubのプライベートイメージにアクセスできるようにアクセス権限をnamespaceのdefaultアカウントに付与 - name: add regcred namespace account uses: steebchen/kubectl@master env: KUBE_CONFIG_DATA: ${{ secrets.K8S_CONFIG }} with: args: | patch serviceaccount default \\ -p '{\\\u0026quot;imagePullSecrets\\\u0026quot;: [{\\\u0026quot;name\\\u0026quot;: \\\u0026quot;regcred\\\u0026quot;}]}' \\ -n 52steps  おじさんの感想 社内CI環境との違いはざっと以下の通り。\n   もの 社内 今回     CI gitlabCI github actions   k8s beremetalなk8s digitaloceanのk3s   docker registry gitlab registory dockerhub    CI環境は書き方の違いがあるくらいで、使っている範囲では出来る事に違いはなさそう。\nk3sは今回の範囲ではk8sと同じ操作が可能で特にk3sを意識することはなかった。\ndockerregistoryはdockerhub使う事にしたおかげでinsecure-registriesの設定は要らなかった。\n","id":3,"section":"posts","summary":"CIをGitHub Actionsでやってみた gitlabCIでやってたことをGitHub Actionsのドキュメント見て置き換えるだけ。 とは","tags":["52steps","k9s","k3s","dockerhub","Github Actions"],"title":"Github Actions","uri":"https://shchy.github.io/2021/05/20210503/","year":"2021"},{"content":"デプロイの確認 まだアプリのコンテナレジストリどうするか問題があるのでk8sのクイックスタートをなぞって動作確認を行う。\nコマンド kubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:1.0 kubectl expose deployment hello-server --type LoadBalancer --port 80 --target-port 8080  繋がらない 上記で作成したhello-serverserviceを確認すると外部IPがpendingのまま変わらない。 多分digitaloceanでDropletに割り当てられてるIPは１つだから外部IPの取得ができなくて困ってるんだろう。\n他のserviceを確認するとtraefikというサービスが唯一の外部IPをポート80で使用している。\nのでポートを変えてみる。\nkubectl expose deployment hello-server --type LoadBalancer --port 8080 --target-port 8080  繋がった。\ntraefikて何なん Ingressだって。\nじゃあIngress経由で公開してみよう。\nhello-serverのserviceをClusterIPに変更してポートも元に戻す kubectl expose deployment hello-server --type ClusterIP --port 80 --target-port 8080  ingress.ymlを作成 apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: ingress annotations: ingress.kubernetes.io/ssl-redirect: \u0026quot;true\u0026quot; spec: rules: - http: paths: - path: / pathType: Prefix backend: service: name: hello-server port: number: 80  ingressを配置 kubectl apply -f ingress.yml  繋がった ","id":4,"section":"posts","summary":"デプロイの確認 まだアプリのコンテナレジストリどうするか問題があるのでk8sのクイックスタートをなぞって動作確認を行う。 コマンド kubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:1.0 kubectl expose","tags":["52steps","k9s","k3s","digitalocean"],"title":"続k3s","uri":"https://shchy.github.io/2021/05/20210502/","year":"2021"},{"content":"動機 アプリをホストするサーバはDigitalOceanにする。\n仕事ではなんとなくAWSが多い気がするが、おじさんはメジャーなものはあんまり好きじゃないのである。\nDigitalOceanは５年くらい無駄に五百円払い続けてたという実績を持っているのでベテランである。\nk8sならどこで動いているかはあんまり関係ないのである。（コンピューティングサービス使うだけなら）\nと思ったらk8sを使うには1000円💵かかる。ワンコイン🪙じゃないのか。\n社内に作ったのと同じように500円サーバにk8sをbaremetalで構築すれば良いのではないかと閃いたが、500円では1cpuなので無理っぽい。\nこの機会にk3sを試してみた。\n手順   アカウント作ってCreateボタンからDropletを選択\n  Choose an imageからUbuntuを選択\n  AuthenticationのNew SSHKeyボタン押して接続用のkeyを入力\n※済なら選ぶだけ\n※他のCPUとかの設定は値段を気にしながら適当に選ぶ\n  作ったDropletを選択するとIPが確認できる(赤い塗りつぶしのとこ)のでSSH接続する\nssh root@\u0026lt;IP\u0026gt;\n  k3sをインストール\n  curl -sfL https://get.k3s.io | sh -  configファイルのダウンロード\n\u0026lt;IP\u0026gt;の箇所を接続IPに書き換えて出力された内容をローカルの~/.kube/configに配置  cat /etc/rancher/k3s/k3s.yaml | sed s/127.0.0.1/\u0026lt;IP\u0026gt;/  接続確認\nssh切断してローカルでkubectlとかk9sが使えるかどうか確認  kubectl get all -A  感想 kubectlの応答がめちゃ遅い。（2sくらいかかる）\nrancherOSにしてDockerイメージを単体で起動する形にすべきだろうか。\nでもDBイメージとか複数起動したりするのめんどい。k8s使いたい。\n500円はやはり無謀なのだろうか。\nk3sはエッジなハードウェアでk8sクラスタを起動する用途なので（多分）低スペックな環境でどこまでイケるかしばらく試してみよう。\n","id":5,"section":"posts","summary":"動機 アプリをホストするサーバはDigitalOceanにする。 仕事ではなんとなくAWSが多い気がするが、おじさんはメジャーなものはあんまり好","tags":["52steps","k9s","k3s","digitalocean"],"title":"K3S🛴","uri":"https://shchy.github.io/2021/05/20210501/","year":"2021"},{"content":"画面イメージ作成 Blogの各種連携は完了し、サボり監視ツールの制作は一ミリ進んだ🤥\ninVision使ってみたけど作図はフリーハンドでしかできない気がしたのでやめてMarvelで画面イメージを作り始めた。\n内容  年間カレンダーを52コマ（週数）にして週末の数を可視化 言うても毎週活動するのはきついからサボる割合を設定 達成したい事とその見積もりをざっくりコマ数で入力 サボり率を考慮して52コマに達成したい事を並べて完了予想日を可視化 意外と知られてないんですけどすごい期間かかるんですね。\nを再認識させてくれる小泉さんのようなツールを目指したい。  4番目の画面がHome画面になると思うのでそのレイアウトを考えてるけど何も思い浮かばない。🤔\nコマの色だけでサボった／やった／未来を判断できるようにして何をやったかはtooltipとかクリック後に表示するのがいい気がする。\n避けないといけない事 入力を増やさない。\n未来の予定とかは入力させない。\nできれば達成したいことも入力させたくないけど「やった／さぼった」だけだと尻叩きにならない気もするのでちょうどいいところを模索する。\nタイトルとコマ数と優先度（ドラッグで上下）くらいでしょうか。\nおじさんの気づき ちょっとしたものなのになんだかめんど過ぎませんか。\n仕事との違いはUIを自由にして良いのがきっと原因だ。\n制約がないと無限にいい案考えてるフリで終わってしまう。\n仕様上の制約がないから時間の制約をつけるしかないよね。\nあとここで言うやりたい事リストを「アチーブメントリスト」とするのは英語的に違和感があるものでしょうか。\n英語できたい。\n","id":6,"section":"posts","summary":"画面イメージ作成 Blogの各種連携は完了し、サボり監視ツールの制作は一ミリ進んだ🤥 inVision使ってみたけど作図はフリーハンドでしかでき","tags":["無駄口","52steps"],"title":"サボり監視","uri":"https://shchy.github.io/2021/04/20210425/","year":"2021"},{"content":"落ちた GoogleのBloggerでこのブログを始めてすぐに（3/28くらい）申請して、先週(4/16)にメールで通知されました。\nGW明けまでに1円ゲットの夢が潰えた。\n反省 アクセス解析してたら自分しか見てなかったし、センセイからも「それじゃだめです」とご指導を受けてたので想定してたけど残念。\nアクセス数を増やす対策してから再申請することにする。\nついでにBlogger辞める ついでにBloggerはMarkdown使えないし（※）テンプレート少ないしGithub.ioとHugoで運用していくことにする。\n※変換ツール使ってHTMLで保存すればイケるけど修正はHTML編集しないといけなくて地獄。\n記事数が少ない内にHTMLをMarkdownに手動で戻して移行完了。\n明日はGoogle Analyticsとの連携とかBloggerスペースの削除とかを実施予定。\nちなみに サボり監視ツールの制作は一ミリも進んでいない。さすがである。\ninVisionで画面イメージでも作ってみようと思う。\n","id":7,"section":"posts","summary":"落ちた GoogleのBloggerでこのブログを始めてすぐに（3/28くらい）申請して、先週(4/16)にメールで通知されました。 GW明けま","tags":["無駄口","adsense"],"title":"Google AdSenseの審査に落ちた","uri":"https://shchy.github.io/2021/04/20210423/","year":"2021"},{"content":"弱点なくなるじゃんね。\nバックエンドにgoを選択したのは何かのお導きだったのか。\nhttps://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md\nによると2022年の1.18バージョンで正式リリースされるとのこと。\n既存のライブラリを利用したコードでも支障なく動くのかが気になるところであるが、以下によると「デザインはGo1と完全な下位互換性があります。」とあるのできっといけるはず。\nhttps://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-contracts.md\nhttps://medium.com/eureka-engineering/golang-generics-design-draft-linked-list-4d1174e2355d\n上記ブログの手順をやってみた。\ngo2goブランチでgoをビルド mkdir ~/go2go \u0026amp;\u0026amp; cd go2go git clone https://go.googlesource.com/go goroot \u0026amp;\u0026amp; cd goroot git fetch git checkout dev.go2go cd src ./make.bash echo 'export PATH=\u0026quot;$HOME/go2go/goroot/bin:$PATH\u0026quot;' \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc  動かない 動いた（2021/04/27追記） go tool go2go run main.go2 cannot find package \u0026quot;run\u0026quot; in any of: ... /Users/user/go2go/goroot/bin/go [run run main.go] failed: exit status 1  [run run main.go]て何？run main.goが正しいのでは。\n2021/04/27追記\nrun runはバグでした。\n最新をpullして実行したらgo tool go2go run main.go2で動きましたが、やはりfiber使ったコードではエラーになる。\n動いた バグなのかなってことでtranslateでgoファイルに変換して自分でrunするとうまくいった。\ngo tool go2go translate main.go2で変換コードを確認してみる。\nGenericな関数もちゃんと変換されてる\ngo tool go2go translate main.go2 go run main.go  package main import \u0026quot;fmt\u0026quot; func Print[T any](s []T) { for _, v := range s { fmt.Println(v) } } func main() { Print([]int{1, 2, 3, 4, 5}) println(\u0026quot;hello\u0026quot;) }  // Code generated by go2go; DO NOT EDIT. //line main.go2:1 package main //line main.go2:1 import \u0026quot;fmt\u0026quot; //line main.go2:11 func main() { //line main.go2:11 instantiate୦୦Print୦int([]int{1, 2, 3, 4, 5}) //line main.go2:13 println(\u0026quot;hello\u0026quot;) } //line main.go2:5 func instantiate୦୦Print୦int(s []int,) { for _, v := range s { fmt.Println(v) } } //line main.go2:9 type Importable୦ int //line main.go2:9 var _ = fmt.Errorf  でもこれだと他のジェネレータ系と変わらないね\n作り始めたfiberサーバにそのまま使えるのか 結論だけ言うとうまくいかなかった。\nimportGo1Packageってとこで死んでるので既存ライブラリのインポートに失敗してるっぽい。\n徹夜してprintログ仕込みまくってtagsパラメータを指定したりファイル名から対象OS選択する処理を追加したりすると何とかimportGo1Packageは突破できたけど、次に型チェックで失敗する。\ngo2goは実験用ブランチみたいだからプレビューバージョンくらいになるまでは大人しくジェネレータ使うことにしよう。\n","id":8,"section":"posts","summary":"弱点なくなるじゃんね。 バックエンドにgoを選択したのは何かのお導きだったのか。 https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md によると2022年の1.18バージョンで正式リリースされると","tags":["go","go2"],"title":"goにgenricsが来るらしい","uri":"https://shchy.github.io/2021/04/20210410/","year":"2021"},{"content":"どれにしよう Vueは2も3も使ってみた事がある。\nangularはangularDartで使ったことがある。\nreactは使ったことない。\nstackoverflowの比較\n\nreactなのか。しかしながら、おじさんはメジャーな奴は好きではないのである。\ndartのBLOCパターンを使ってみたいので結果を無視してflutterにしてみる。\n\n２位だし。（多分Webだけじゃないけど）\nSPAのSEO対策について 昔SPAはSEO的に不利と見た覚えがある。\nhttps://www.codit.work/notes/mhpxxkeqv4qhzfjecmrn/\nもう結構平気みたい。\n構築手順 公式サイトに沿って進めるだけ。\nhttps://flutter.dev/docs/get-started/web\ncd ~/development curl -LO https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_2.0.4-stable.zip unzip ~/development/flutter_macos_2.0.4-stable.zip echo \u0026quot;export PATH=\\$PATH:$(pwd)/flutter/bin\u0026quot; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc rm ~/development/flutter_macos_2.0.4-stable.zip  flutter doctor で依存関係のステータス確認 Running \u0026quot;flutter pub get\u0026quot; in flutter_tools... 3.3s Doctor summary (to see all details, run flutter doctor -v): [✓] Flutter (Channel stable, 2.0.4, on macOS 11.3 20E5217a darwin-x64, locale ja-JP) [✗] Android toolchain - develop for Android devices ✗ Unable to locate Android SDK. Install Android Studio from: https://developer.android.com/studio/index.html On first launch it will assist you in installing the Android SDK components. (or visit https://flutter.dev/docs/get-started/install/macos#android-setup for detailed instructions). If the Android SDK has been installed to a custom location, please use `flutter config --android-sdk` to update to that location. [✗] Xcode - develop for iOS and macOS ✗ Xcode installation is incomplete; a full installation is necessary for iOS development. Download at: https://developer.apple.com/xcode/download/ Or install Xcode via the App Store. Once installed, run: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer sudo xcodebuild -runFirstLaunch ✗ CocoaPods not installed. CocoaPods is used to retrieve the iOS and macOS platform side\u0026amp;#39;s plugin code that responds to your plugin usage on the Dart side. Without CocoaPods, plugins will not work on iOS or macOS. For more info, see https://flutter.dev/platform-plugins To install see https://guides.cocoapods.org/using/getting-started.html#installation for instructions. [✓] Chrome - develop for the web [!] Android Studio (not installed) [✓] VS Code (version 1.54.3) [✓] Connected device (1 available) ! Doctor found issues in 3 categories.  [✓] Chrome - develop for the webがオッケーならよさそう。\nflutter devices でデバイスが有効になっていることを確認 1 connected device: Chrome (web) • chrome • web-javascript • Google Chrome 89.0.4389.114  アプリ作成 flutter create clientapp  起動確認 cd clientapp flutter run -d chrome  コードがリアルタイムに反映されるので開発も楽そう。\n","id":9,"section":"posts","summary":"どれにしよう Vueは2も3も使ってみた事がある。 angularはangularDartで使ったことがある。 reactは使ったことない。 sta","tags":["52steps","web","flutter"],"title":"フロントエンドの選択","uri":"https://shchy.github.io/2021/04/20210404/","year":"2021"},{"content":"サボりを可視化する何かを作ることにした。\nアレもコレもとつけたくなってしまうがグッと堪えて完成を優先する。(センセイの教え)\nバックエンドサーバに何を使うかの検討するためにベンチマーク見てみた。\n普段はgoのechoを使っているのである。\n\nDBはpostgres一択の様子。\nネイティブビルドのC++、Rust、Goが早い傾向にあるのであった。\nC++使うほどパフォーマンス必要なもの作る予定はない。\nRustはやってみたいなと思いつつ、Haskell並に制約厳しかった印象なのでまだおじさんのレベルが足りていない。\nJavaとC#が上位に１件ずついるのは無視してやはりGoを使うのである。\nただechoはまあまあ遅いことがわかったのでランキング上位で使いやすそうなfiberを使うことにする。\n","id":10,"section":"posts","summary":"サボりを可視化する何かを作ることにした。 アレもコレもとつけたくなってしまうがグッと堪えて完成を優先する。(センセイの教え) バックエンドサーバ","tags":["無駄口"],"title":"バックエンドサーバの選択","uri":"https://shchy.github.io/2021/04/20210403/","year":"2021"},{"content":"永遠に寝てた。おじさんのリアルである。\nダメなところを隠すと反省につながらないのである。\n今からやればと思うじゃん？\n珍しく地元のお友達に呼ばれたのでこの後は出かけるのである。\nしかし2日目にしてこの流れは大変良くないので、サボりを可視化する何かを作ろう。\n","id":11,"section":"posts","summary":"永遠に寝てた。おじさんのリアルである。 ダメなところを隠すと反省につながらないのである。 今からやればと思うじゃん？ 珍しく地元のお友達に呼ばれた","tags":["無駄口"],"title":"2日目","uri":"https://shchy.github.io/2021/03/20210329/","year":"2021"},{"content":"Neetを目指す事にした 会社の後輩の有能なクソガキがニートになると聞き、ご様子を伺いに行ったら想像以上に眩しいお姿してらしたのでおじさんもNeetを目指すことにした。\nゼロをイチにしていたクソガキ クソガキは以前から個人で稼いで悠々自適の生活を目指していたと思う。\nよくある目標である。おじさんも目指してた。\n目指すだけなら良くあるが、クソガキは実際行動していて、既に小規模ながらも形にしていた。なんとゼロをイチにしていたのだ。\n「誰もが通る道じゃよ、おじさんもそうじゃった。気持ちはわかる。でもニートは悪手じゃろ。せめて何か形になるまでは給与もらいながらサイドビジネスでしたらあかんか？」と、かつておじさん自身が上司に言われた事を伝言ゲームしに行ったが、一歩先行くクソガキにそんな事を言うのはダサすぎて言えないおじさんなのであった。\n「イチを増やすのに時間がいるからニートになる」のだそうだ。カッコイイ！おじさんを置いていかないで！\n宣誓 おじさんはファミリーを持っているのでゼロをイチにしただけではNeetにはなれない。\nしかしこのまま40,50代を迎えても将来の勝ち目は見えない。(おじさんは30代である)\nガチれば会社と脱獄の両輪回せるはず。回せらぁ！\nセンセイによるとブログは個人の情報発信拠点として有用だからやりなさいとのこと、始めました。\nまずはGW明けまでに一円でも稼ぐことを目標にする。\n","id":12,"section":"posts","summary":"Neetを目指す事にした 会社の後輩の有能なクソガキがニートになると聞き、ご様子を伺いに行ったら想像以上に眩しいお姿してらしたのでおじさんもN","tags":["無駄口"],"title":"一歩目","uri":"https://shchy.github.io/2021/03/20210328/","year":"2021"}],"tags":[{"title":"52steps","uri":"https://shchy.github.io/tags/52steps/"},{"title":"adsense","uri":"https://shchy.github.io/tags/adsense/"},{"title":"digitalocean","uri":"https://shchy.github.io/tags/digitalocean/"},{"title":"dockerhub","uri":"https://shchy.github.io/tags/dockerhub/"},{"title":"firebase","uri":"https://shchy.github.io/tags/firebase/"},{"title":"firebase Authentication","uri":"https://shchy.github.io/tags/firebase-authentication/"},{"title":"firebase hosting","uri":"https://shchy.github.io/tags/firebase-hosting/"},{"title":"flutter","uri":"https://shchy.github.io/tags/flutter/"},{"title":"Github Actions","uri":"https://shchy.github.io/tags/github-actions/"},{"title":"go","uri":"https://shchy.github.io/tags/go/"},{"title":"go2","uri":"https://shchy.github.io/tags/go2/"},{"title":"k3s","uri":"https://shchy.github.io/tags/k3s/"},{"title":"k9s","uri":"https://shchy.github.io/tags/k9s/"},{"title":"web","uri":"https://shchy.github.io/tags/web/"},{"title":"無駄口","uri":"https://shchy.github.io/tags/%E7%84%A1%E9%A7%84%E5%8F%A3/"}]}